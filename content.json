{"meta":{"title":"坑爹啊","subtitle":"坑爹坑自己","description":null,"author":"kendiea","url":"http://www.kendiea.com"},"pages":[{"title":"about","date":"2018-05-30T07:31:09.000Z","updated":"2018-05-30T07:31:09.407Z","comments":true,"path":"about/index.html","permalink":"http://www.kendiea.com/about/index.html","excerpt":"","text":""},{"title":"","date":"2018-05-30T07:25:09.000Z","updated":"2018-05-30T07:26:20.138Z","comments":false,"path":"categories/index.html","permalink":"http://www.kendiea.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-30T06:51:37.000Z","updated":"2018-05-30T07:23:46.441Z","comments":false,"path":"tags/index.html","permalink":"http://www.kendiea.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"README2","date":"2018-05-31T01:36:47.448Z","updated":"2017-09-07T04:54:49.000Z","comments":true,"path":"2018/05/31/README2/","link":"","permalink":"http://www.kendiea.com/2018/05/31/README2/","excerpt":"","text":"GeoPandas Python tools for geographic data IntroductionGeoPandas is a project to add support for geographic data topandas objects. It currently implementsGeoSeries and GeoDataFrame types which are subclasses ofpandas.Series and pandas.DataFrame respectively. GeoPandasobjects can act on shapelygeometry objects and perform geometric operations. GeoPandas geometry operations are cartesian. The coordinate referencesystem (crs) can be stored as an attribute on an object, and isautomatically set when loading from a file. Objects may betransformed to new coordinate systems with the to_crs() method.There is currently no enforcement of like coordinates for operations,but that may change in the future. Documentation is available at geopandas.org(current release) andRead the Docs(release and development versions). InstallRequirements For the installation of GeoPandas, the following packages are required: pandas shapely fiona descartes pyproj Further, rtree is an optionaldependency. rtree requires the C library libspatialindex. If using brew, you can install using brew install Spatialindex. Install Then, installation works as normal: pip install geopandas Examples&gt;&gt;&gt; p1 = Polygon([(0, 0), (1, 0), (1, 1)]) &gt;&gt;&gt; p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]) &gt;&gt;&gt; p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)]) &gt;&gt;&gt; g = GeoSeries([p1, p2, p3]) &gt;&gt;&gt; g 0 POLYGON ((0.0000000000000000 0.000000000000000... 1 POLYGON ((0.0000000000000000 0.000000000000000... 2 POLYGON ((2.0000000000000000 0.000000000000000... dtype: object Some geographic operations return normal pandas object. The area property of a GeoSeries will return a pandas.Series containing the area of each item in the GeoSeries: &gt;&gt;&gt; print g.area 0 0.5 1 1.0 2 1.0 dtype: float64 Other operations return GeoPandas objects: &gt;&gt;&gt; g.buffer(0.5) Out[15]: 0 POLYGON ((-0.3535533905932737 0.35355339059327... 1 POLYGON ((-0.5000000000000000 0.00000000000000... 2 POLYGON ((1.5000000000000000 0.000000000000000... dtype: object GeoPandas objects also know how to plot themselves. GeoPandas uses descartes to generate a matplotlib plot. To generate a plot of our GeoSeries, use: &gt;&gt;&gt; g.plot() GeoPandas also implements alternate constructors that can read any data format recognized by fiona. To read a zip file containing an ESRI shapefile with the boroughs boundaries of New York City (GeoPandas includes this as an example dataset): &gt;&gt;&gt; nybb_path = geopandas.datasets.get_path(&apos;nybb&apos;) &gt;&gt;&gt; boros = GeoDataFrame.from_file(nybb_path) &gt;&gt;&gt; boros.set_index(&apos;BoroCode&apos;, inplace=True) &gt;&gt;&gt; boros.sort() &gt;&gt;&gt; boros BoroName Shape_Area Shape_Leng \\ BoroCode 1 Manhattan 6.364422e+08 358532.956418 2 Bronx 1.186804e+09 464517.890553 3 Brooklyn 1.959432e+09 726568.946340 4 Queens 3.049947e+09 861038.479299 5 Staten Island 1.623853e+09 330385.036974 geometry BoroCode 1 (POLYGON ((981219.0557861328125000 188655.3157... 2 (POLYGON ((1012821.8057861328125000 229228.264... 3 (POLYGON ((1021176.4790039062500000 151374.796... 4 (POLYGON ((1029606.0765991210937500 156073.814... 5 (POLYGON ((970217.0223999023437500 145643.3322... &gt;&gt;&gt; boros[&apos;geometry&apos;].convex_hull 0 POLYGON ((915517.6877458114176989 120121.88125... 1 POLYGON ((1000721.5317993164062500 136681.7761... 2 POLYGON ((988872.8212280273437500 146772.03179... 3 POLYGON ((977855.4451904296875000 188082.32238... 4 POLYGON ((1017949.9776000976562500 225426.8845... dtype: object","categories":[],"tags":[]},{"title":"","slug":"README","date":"2018-05-31T01:36:36.296Z","updated":"2017-09-07T04:54:49.000Z","comments":true,"path":"2018/05/31/README/","link":"","permalink":"http://www.kendiea.com/2018/05/31/README/","excerpt":"","text":"GeoPandas Python tools for geographic data IntroductionGeoPandas is a project to add support for geographic data topandas objects. It currently implementsGeoSeries and GeoDataFrame types which are subclasses ofpandas.Series and pandas.DataFrame respectively. GeoPandasobjects can act on shapelygeometry objects and perform geometric operations. GeoPandas geometry operations are cartesian. The coordinate referencesystem (crs) can be stored as an attribute on an object, and isautomatically set when loading from a file. Objects may betransformed to new coordinate systems with the to_crs() method.There is currently no enforcement of like coordinates for operations,but that may change in the future. Documentation is available at geopandas.org(current release) andRead the Docs(release and development versions). InstallRequirements For the installation of GeoPandas, the following packages are required: pandas shapely fiona descartes pyproj Further, rtree is an optionaldependency. rtree requires the C library libspatialindex. If using brew, you can install using brew install Spatialindex. Install Then, installation works as normal: pip install geopandas Examples&gt;&gt;&gt; p1 = Polygon([(0, 0), (1, 0), (1, 1)]) &gt;&gt;&gt; p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]) &gt;&gt;&gt; p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)]) &gt;&gt;&gt; g = GeoSeries([p1, p2, p3]) &gt;&gt;&gt; g 0 POLYGON ((0.0000000000000000 0.000000000000000... 1 POLYGON ((0.0000000000000000 0.000000000000000... 2 POLYGON ((2.0000000000000000 0.000000000000000... dtype: object Some geographic operations return normal pandas object. The area property of a GeoSeries will return a pandas.Series containing the area of each item in the GeoSeries: &gt;&gt;&gt; print g.area 0 0.5 1 1.0 2 1.0 dtype: float64 Other operations return GeoPandas objects: &gt;&gt;&gt; g.buffer(0.5) Out[15]: 0 POLYGON ((-0.3535533905932737 0.35355339059327... 1 POLYGON ((-0.5000000000000000 0.00000000000000... 2 POLYGON ((1.5000000000000000 0.000000000000000... dtype: object GeoPandas objects also know how to plot themselves. GeoPandas uses descartes to generate a matplotlib plot. To generate a plot of our GeoSeries, use: &gt;&gt;&gt; g.plot() GeoPandas also implements alternate constructors that can read any data format recognized by fiona. To read a zip file containing an ESRI shapefile with the boroughs boundaries of New York City (GeoPandas includes this as an example dataset): &gt;&gt;&gt; nybb_path = geopandas.datasets.get_path(&apos;nybb&apos;) &gt;&gt;&gt; boros = GeoDataFrame.from_file(nybb_path) &gt;&gt;&gt; boros.set_index(&apos;BoroCode&apos;, inplace=True) &gt;&gt;&gt; boros.sort() &gt;&gt;&gt; boros BoroName Shape_Area Shape_Leng \\ BoroCode 1 Manhattan 6.364422e+08 358532.956418 2 Bronx 1.186804e+09 464517.890553 3 Brooklyn 1.959432e+09 726568.946340 4 Queens 3.049947e+09 861038.479299 5 Staten Island 1.623853e+09 330385.036974 geometry BoroCode 1 (POLYGON ((981219.0557861328125000 188655.3157... 2 (POLYGON ((1012821.8057861328125000 229228.264... 3 (POLYGON ((1021176.4790039062500000 151374.796... 4 (POLYGON ((1029606.0765991210937500 156073.814... 5 (POLYGON ((970217.0223999023437500 145643.3322... &gt;&gt;&gt; boros[&apos;geometry&apos;].convex_hull 0 POLYGON ((915517.6877458114176989 120121.88125... 1 POLYGON ((1000721.5317993164062500 136681.7761... 2 POLYGON ((988872.8212280273437500 146772.03179... 3 POLYGON ((977855.4451904296875000 188082.32238... 4 POLYGON ((1017949.9776000976562500 225426.8845... dtype: object","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-05-29T07:15:30.709Z","updated":"2018-05-29T07:15:30.709Z","comments":true,"path":"2018/05/29/hello-world/","link":"","permalink":"http://www.kendiea.com/2018/05/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}